import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_expense => "add expense";
  String get amount => "amount";
  String get app_id_ => "app id";
  String get app_title => "SAVEFY app";
  String get cancel => "cancel";
  String get check_your_email_and_follow_the_instructions_to_reset_your => "Check your email and follow the instructions to reset your password.";
  String get close => "close";
  String get create_an_account => "create an account";
  String get email => "email";
  String get first_name => "first name";
  String get forgot_password => "forgot password";
  String get forgot_password_error => "Forgot Password Error";
  String get have_an_account_sign_in => "already have an account? sign in";
  String get home => "home";
  String get last_name => "last name";
  String get password => "password";
  String get password_reset_email_sent => "password reset email sent";
  String get profile => "profile";
  String get save => "save";
  String get setttings_id => "settings id";
  String get sign_in => "sign in";
  String get sign_in_error => "sign in error";
  String get sign_out => "sign out";
  String get sign_up => "sign up";
  String get sign_up_error => "sign up error";
  String get success => "success";
  String get update_user_info => "save my info";
  String get user_profile_updated => "your user information was updated successfully";
  String error_e(String e) => "the following error occurred: $e";
}

class $en extends S {
  const $en();
}

class $pt_BR extends S {
  const $pt_BR();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "cancelar";
  @override
  String get save => "salvar";
  @override
  String get create_an_account => "crie uma conta";
  @override
  String get update_user_info => "salvar minhas informações";
  @override
  String get password => "senha";
  @override
  String get sign_up_error => "erro ao cadastrar";
  @override
  String get check_your_email_and_follow_the_instructions_to_reset_your => "Verifique seu e-mail e siga as instruções para redefinir sua senha";
  @override
  String get close => "fechar";
  @override
  String get first_name => "primeiro nome";
  @override
  String get email => "e-mail";
  @override
  String get sign_in => "entrar";
  @override
  String get sign_out => "sair";
  @override
  String get password_reset_email_sent => "e-mail de redefinição de senha enviado";
  @override
  String get amount => "valor";
  @override
  String get sign_up => "registrar-se";
  @override
  String get app_title => "SAVEFY app";
  @override
  String get profile => "perfil";
  @override
  String get last_name => "último nome";
  @override
  String get sign_in_error => "erro ao entrar";
  @override
  String get add_expense => "adicionar despesa";
  @override
  String get home => "home";
  @override
  String get app_id_ => "app id";
  @override
  String get success => "success";
  @override
  String get forgot_password_error => "erro ao recuperar a senha";
  @override
  String get setttings_id => "id configurações";
  @override
  String get have_an_account_sign_in => "já tem uma conta? entrar";
  @override
  String get forgot_password => "esqueceu a senha";
  @override
  String get user_profile_updated => "your user information was updated successfully";
  @override
  String error_e(String e) => "ocorreu o seguinte erro: $e";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("pt", "BR"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "pt_BR":
          S.current = const $pt_BR();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
